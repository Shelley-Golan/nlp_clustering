import sklearn.datasets
from datasets import load_dataset
import csv
import datasets
import pandas as pd

import os
import numpy as np
import pandas as pd

from sklearn.datasets import fetch_20newsgroups

from sklearn.cluster import KMeans

from sklearn.feature_extraction.text import TfidfVectorizer

import matplotlib.pyplot as plt

import seaborn as sns

np.random.seed(477)

print("Please load the raw csv data")
filename = "/home/shelly.golan/nlp/Coded interviews database31072022_ours.xlsm"

all_ds_dict = pd.read_excel(filename, sheet_name=None)

# all the unwanted / irrelevant keys:
to_skip_keys = ["Ziv1",
                "Naor1",
                "Edna1",
                "Dan1",
                "Yoram1",
                "Ram1",
                "Hilli1",
                "Gabby1",
                "Dana_assmnt",
                "Idit_assmnt",
                "Amir_assmnt",
                "Hila1",
                "סיכום תוצאות",
                "סיכום תוצאות (3)",
                "סיכום תוצאות (2)",
                'תיעוד',
                'Bondedness']

# the new dict:
rel_ds_dict = {key: all_ds_dict[key] for key in all_ds_dict if key not in to_skip_keys}

print(rel_ds_dict.keys())

# all the tasks:
tasks = rel_ds_dict.keys()

test_rel_ds_dict = rel_ds_dict

# spesific sheet to test:
school_area_sheet = test_rel_ds_dict["Task school area"]

# remove all the coulms that all nans:
school_area_sheet = school_area_sheet.dropna(axis=0, how='all')
school_area_sheet = school_area_sheet.dropna(axis=1, how='all')
# as is 65X86
# without the 0axis Nan 65x63
# without any Nan - 64x63
# clean the Nan's in akk the dataset

for key in rel_ds_dict.keys():
    rel_ds_dict[key] = rel_ds_dict[key].dropna(axis=0, how='all')
    rel_ds_dict[key] = rel_ds_dict[key].dropna(axis=1, how='all')


def get_beginning_of_interview_in_all_tasks():
    beginning_loc_dict = {}
    for current_df_key in rel_ds_dict:
        df = rel_ds_dict[current_df_key]
        beginning_loc_dict[current_df_key] = get_beginning_of_interview(df)
    return beginning_loc_dict


def get_beginning_of_interview(df):
    # replace the Nan to np nan's , so np could work with it:
    df = df.replace('NAN', np.nan)

    for i, column in enumerate(df):
        df[column] = df[column].map(str)
        contains_series = df[column].str.contains(':', na=False)
        for i, value in enumerate(contains_series):
            if value == True:
                return i
    return -1


import json


def write_dict_to_json(dict, fname):
    with open(fname, "w") as outfile:
        json.dump(dict, outfile)


def get_dict_of_lines():
    starting_line_dict = {}
    for key in rel_ds_dict:
        print(f'we are in {key} sheet')
        starting_line_dict[key] = input(f'please enter the begining line my firiend: ')
        write_dict_to_json(starting_line_dict, 'starting_line_dict')


def read_dict_from_json(fname):
    with open(fname) as json_file:
        return json.load(json_file)


conv_dict = {}
for current_sheet in rel_ds_dict:
    conv_dict[current_sheet] = {}
    current_df = rel_ds_dict[current_sheet]
    for i, column in enumerate(current_df):
        flag = False
        for j, cell in enumerate(current_df[column]):
            if cell == 'BOC':
                flag = True
                conv_dict[current_sheet][i] = []
            if cell == 'EOC':
                flag = False
            if flag:
                conv_dict[current_sheet][i].append(cell)


conv_dict_for_df = {}
for current_sheet in rel_ds_dict:
    current_df = rel_ds_dict[current_sheet]
    for i, column in enumerate(current_df):
        flag = False
        for j, cell in enumerate(current_df[column]):
            if cell == 'BOC':
                flag = True
                conv_dict_for_df[current_sheet + str(i)] = []
            if cell == 'EOC':
                flag = False
            if flag:
                conv_dict_for_df[current_sheet + str(i)].append(cell)

with open('convs.csv', 'w') as f:  # You will need 'wb' mode in Python 2.x
    w = csv.DictWriter(f, conv_dict.keys())
    w.writeheader()
    w.writerow(conv_dict)

dataset_test1 = load_dataset('csv', data_files=['convs.csv'])

conv_df = pd.DataFrame([conv_dict_for_df], columns=conv_dict_for_df.keys())

dataset_test2 = datasets.Dataset.from_pandas(conv_df.astype(str))

import hebrew_tokenizer as ht

text = []

for key in conv_dict_for_df.keys():
    for word in range(0, len(conv_df[key][0])):
        if conv_df[key][0][word] == "BOC":
            continue
        if conv_df[key][0][word] == "nan":
            continue
        text += str([conv_df[key][0][word]])

datasets_per_child = []
text_per_child = []
indicator = 0
for key in conv_dict_for_df.keys():
    for word in range(0, len(conv_df[key][0])):
        if conv_df[key][0][word] == "BOC":
            text_per_child = ''.join(text_per_child)
            tokens_per_child = []
            tokens = ht.tokenize(text_per_child)  # tokenize returns a generator!
            for grp, token, token_num, (start_index, end_index) in tokens:
                if grp == 'HEBREW':
                    tokens_per_child += [token]
            datasets_per_child += [' '.join(tokens_per_child)]
            text_per_child = []
            continue
        if conv_df[key][0][word] == "nan":
            continue
        text_per_child += str([conv_df[key][0][word]])

texts = ''.join(text)
hebrew_tokens = []
punctuation_signs = []
tokens = ht.tokenize(texts)  # tokenize returns a generator!
for grp, token, token_num, (start_index, end_index) in tokens:
    if grp == 'HEBREW':
        hebrew_tokens +=[token]
    if grp == 'PUNCTUATION' and token != '[' and token != ']' and token != '(' and token != ')' and token != "'":
        punctuation_signs += [token]

hebrew_tokens = list(dict.fromkeys(hebrew_tokens))

#print(hebrew_tokens)

import numpy as np


dataset = pd.DataFrame(list(zip(hebrew_tokens, punctuation_signs)), columns=["hebrew_token", "punc_signs"])
dataset.to_csv('dataset.csv')
train = dataset['hebrew_token']

stop_words_dict = ["אחלה",
'ילדים' ,'ימין', 'יסבירו', 'קניות',
                   'שה', 'לאפס', 'אמממ', 'אוחח', 'קבוצות ', 'חוץ', 'חישב', 'חמ', 'חמודי',
                   'חמישי', 'חשב', 'חשבי', 'חשבת', 'חמיש', 'חמשת', 'חישבת', 'מתחילים',
                   'מחצי', 'מבט', 'חמשמאות', 'חולצה', 'טון', 'מיליון', 'בטופס', 'ממ','חולצות',
                   'תתחיל', 'ולהוסיף', 'תשעת',
    'תשעמאות','התחלת' ,'ומפה', 'וכיווץ', 'ומנשיענה', 'תשיעיות', 'וכתוב', 'התוצאה',
                   'תשאירי', 'ומקיש', 'ומוחק', 'ומנשעינה', 'השלישי','השני','תרגיל',
                   'יעגל', 'ימינה', 'יורם', 'יצא', 'יואוו', 'ידיים', 'ואהה', 'השטר',
                   'השולחן', 'היית',
                   'ומתחילה', 'ומתחת', 'לקחת','ולהעריך', 'ידיה', 'הלך',
                   'אמהממ', 'המידע', 'שברה',
 'יסתדר' ,'יעזור', 'יעני' ,'יוצא' ,'יעניינו', 'יכנס', 'גדול',
'בטא', 'יחסית', 'יכולת', 'תתחילי', 'אהא', 'אממ', 'שבעת', 'ומודגשת', 'מליון',
"בשתיים",
'ומטאטה', 'ומטה', 'ומיד', 'ומימינו',
'ומכניסה' ,'ומכניסים' ,'ומכנסיים' ,'ומכסה',
'ובקשר', 'ואומר' ,'ואומרת' ,'ואחר' ,'ואחרון' ,'ואי' ,'ואיך' ,'ואל',
'ואפס' ,'ואצבע', 'ואר', 'ובלחש', 'ובמידת' ,'ובשקט', 'וזו' ,'ובתוכו' ,'וגם' ,'וה',
 'והורדתי', 'והיה', 'והיו' ,'והייתי', 'והם' ,'והפעולה' ,'והצידה' ,'והשתיים', 'ווה',
 'וממלמלת', 'ומנדנדת' ,'המספרים' ,'וצבוע' ,'וצמצום' ,'וקוראת', 'וקטן',
'ושביעית' ,'ושותקת', 'ושלו', 'ושמונהמאות', 'ושמונהתאלפים',
 'ושמונתאלפים' ,'ושני' ,'ושניה' ,'ושת' ,'ושתי' ,'ושתיי' ,'ושתים' ,'ות' ,'ותגידי',
 'ותוך' ,'ותש' ,'זוג' ,'זוגות' ,'זוכר' ,'וצוחקת' ,'ופחות' ,'ומנידה', 'ועל',
 'ומניחה', 'ומסתכלת' ,'ומעבירה' ,'ומעלה', 'ומפה'
                   "כשאני",
                   "כאלו",
                   "פעמים",
                   "משתי",
                   "אומדן",
                   "וככה",
                   "שרה",
                   "דניאל",
                   "בע",
                   "ומאה",
                   "וחמי",
                   "ולמטה",
                   "ולרבע",
                   "וכל",
                   "אעשה","ולדף",
                   "אה",
                   "ומגידה",
                   "משש",
                   "וחזרה",
                   "ולחבר",

"הפנים",
"השטח",
"הבא",
"ואין",
"טופי",
"ואוספת",
"והצלחתי",
"השלוש",
                   "בידיים",
                    "משבר",
                   "שקיבלתי",
                   "להפוך",
                    "שתים",
                   "רוצים",
"חצי",
"אחד",
"ואחד",
"ואחת",
"שתיים",
"ושתיים",
"שלוש",
"שלושה",
"ושלוש",
"ושלושה",
"ארבע",
"ארבעה",
"וארבע",
"וארבעה",
"חמש",
"חמישה",
"וחמש",
"וחמישה",
"שש",
"ושש",
"שבע",
"שבעה",
"ושבע",
"ושבעה",
"וחמ",
"שמונה",
"ושמונה",
"תשע",
"תשעה",
"ותשעה",
"ותשע",
"עשר",
"עשרה",
"עשרות",
"ועשר",
"ועשרה",
"ועשרות",
"עשרים",
"ועשרים",
"שלושים",
"ושלושים",
"ארבעים",
"וארבעים",
"חמישים",
"וחמישים",
"שישים",
"ושישים",
"שבעים",
"ושבעים",
"שמונים",
"ושמונים",
"תשעים",
"ותשעים",
"מאות",
"ומאות",
"וז",
"וזה",
"וחצי",
"ויש",
"והוא",
"והיא",
"היה",
"ומאתיים",
"אני",
"אפס",
"והמראיינת",
"והארבעים",
"וכאן",
"והנה",
"הילי",
"ודניאל",
"וכן",
"שלושי",
"שייש",
"ולא",
"ולמה",
"שכן",
"נקודה",
"וכפל",
"וכפול",
"כפול",
"ומטבעות",
"אותם",
"גדל",
"שייבע",
"תרגילים",
"וואי",
"וזהו",
"תתני",
"והופך",
"וחישבתי",
"ויוצא",
"וכותב",
"וכותבת",
"ודברים",
"והדברים",
"וב",
"והכפלתי",
"ומה",
"ומונה",
"לשבעים",
"ובואי",
"ואת",
"ואתה",
"ומכאן",
"וביום",
"את",
"לא",
"של",
"אני",
"על",
"זה",
"עם",
"כל",
"הוא",
"אם",
"או",
"גם",
"יותר",
"יש",
"לי",
"מה",
"אבל",
"פורום",
"אז",
"טוב",
"רק",
"כי",
"שלי",
"היה",
"בפורום",
"אין",
"עוד",
"היא",
"אחד",
"ב",
"ל",
"עד",
"לך",
"כמו",
"להיות",
"אתה",
"כמה",
"אנחנו",
"הם",
"כבר",
"אנשים",
"אפשר",
"תודה",
"שלא",
"אותו",
"ה",
"מאוד",
"הרבה",
"ולא",
"ממש",
"לו",
"א",
"מי",
"חיים",
"בית",
"שאני",
"יכול",
"שהוא",
"כך",
"הזה",
"איך",
"היום",
"קצת",
"עכשיו",
"שם",
"בכל",
"יהיה",
"תמיד",
"י",
"שלך",
"הכי",
"ש",
"בו",
"לעשות",
"צריך",
"כן",
"פעם",
"לכם",
"ואני",
"משהו",
"אל",
"שלו",
"שיש",
"ו",
"ומשהו",
"ובכלל",
"אתכם",
"אחרי",
"בנושא",
"כדי",
"פשוט",
"לפני",
"שזה",
"אותי",
"אנו",
"למה",
"דבר",
"כ",
"כאן",
"אולי",
"טובים",
"רוצה",
"שנה",
"וארב",
"אותה",
"עמית",
"ועינת",
"עינת",
"זה",
"מה",
"יוסי",
"בש",
"או",
"קי",
"בעינת",
"שח",
"פה",
"ופה",
"בכ",
"שכאן",
"וכאן",
"ל",
"אחוז",
"כר",
"בח",
"בכרכ",
"כרכיה",
"העשרונית",
"אלפים",
"ארבעת",
"האפס",
"באפס",
"ונדה",
"מאות|שמונים",
"אלף",
"נקודה|שמונים",
"מ""ר",
"עדי",
"לניב",
"ושמונה|גדל",
"דור",
"והמראיינת",
"שי",
"חת",
"באלף",
"בלה",
"נ",
"וחמ",
"|",
"לעינת",
"החשבון",
"האגורות",
"לשבעים",
"ויש",
"פחו",
"שאין",
"חה",
"חי",
"החישוב",
"ילד",
"ז",
"ההוא",
"וארב",
"ולא",
"לתרגיל",
"הילי",
"לשישים",
"שייש",
"שייבע",
"תיישע",
"שלואוש",
"שתייים",
"שייקל",
"וז",
"שוויי",
"ממאה",
"שעשרים",
"ומשהו",
"העשרה",
"בסביבות",
"שבערך",
"באפה",
"ומרימה",
"האחד",
"דוקא",
"עוב",
"שתי",
"שליש",
"התשע",
"מהשש",
"ורבע",
"אף",
"דים",
"ועד",
"שאז",
"אפ",
"תש",
"לשבע",
"שלם",
"מש",
"השלמים",
"תרגילים",
"נק",
"קש",
"החמישים",
"נקודות",
"לעשר",
"ליד",
"למאתיים",
"אפסים",
"לאלף",
"רבעים",
"הה",
"הראשונים",
"תוך",
"כדי",
"עמוד",
"שניים",
"שמול",
"ועוד",
"ונקודה",
"ונשאר",
"אומר",
"די",
"דיי",
"שזאת",
"ואנחנו",
"הנכונה",
"ומצביעה",
"ונשען",
"וסוגר",
"ועכשיו",
"ועומדת",
"ועשיתי",
"וש",
"ושוב",
"ליומולדת",
"ולראות",
"ומקריא",
"צבעו",
"בלי",
'אני',
'את',
'אתה',
'אנחנו',
'אתן',
'אתם',
'הם',
'הן',
'היא',
'הוא',
'שלי',
'שלו',
'שלך',
'שלה',
'שלנו',
'שלכם',
'שלכן',
'שלהם',
'שלהן',
'לי',
'לו',
'לה',
'לנו',
'לכם',
'לכן',
'להם',
'להן',
'אותה',
'אותו',
'זה',
'זאת',
'אלה',
'אלו',
'תחת',
'מתחת',
'מעל',
'בין',
'עם',
'עד',
'נגר',
'על',
'אל',
'מול',
'של',
'אצל',
'כמו',
'אחר',
'אותו',
'בלי',
'לפני',
'אחרי',
'מאחורי',
'עלי',
'עליו',
'עליה',
'עליך',
'עלינו',
'עליכם',
'לעיכן',
'עליהם',
'עליהן',
'כל',
'כולם',
'כולן',
'כך',
'ככה',
'כזה',
'זה',
'זות',
'אותי',
'אותה',
'אותם',
'אותך',
'אותו',
'אותן',
'אותנו',
'ואת',
'את',
'אתכם',
'אתכן',
'איתי',
'איתו',
'איתך',
'איתה',
'איתם',
'איתן',
'איתנו',
'איתכם',
'איתכן',
'יהיה',
'תהיה',
'היתי',
'היתה',
'היה',
'להיות',
'עצמי',
'עצמו',
'עצמה',
'עצמם',
'עצמן',
'עצמנו',
'עצמהם',
'עצמהן',
'מי',
'מה',
'איפה',
'היכן',
'במקום שבו',
'אם',
'לאן',
'למקום שבו',
'מקום בו',
'איזה',
'מהיכן',
'איך',
'כיצד',
'באיזו מידה',
'מתי',
'בשעה ש',
'כאשר',
'כש',
'למרות',
'לפני',
'אחרי',
'מאיזו סיבה',
'הסיבה שבגללה',
'למה',
'מדוע',
'לאיזו תכלית',
'כי',
'יש',
'אין',
'אך',
'מנין',
'מאין',
'מאיפה',
'יכל',
'יכלה',
'יכלו',
'יכול',
'יכולה',
'יכולים',
'יכולות',
'יוכלו',
'יוכל',
'מסוגל',
'לא',
'רק',
'אולי',
'אין',
'לאו',
'אי',
'כלל',
'נגד',
'אם',
'עם',
'אל',
'אלה',
'אלו',
'אף',
'על',
'מעל',
'מתחת',
'מצד',
'בשביל',
'לבין',
'באמצע',
'בתוך',
'דרך',
'מבעד',
'באמצעות',
'למעלה',
'למטה',
'מחוץ',
'מן',
'לעבר',
'מכאן',
'כאן',
'הנה',
'הרי',
'פה',
'שם',
'אך',
'ברם',
'שוב',
'אבל',
'מבלי',
'בלי',
'מלבד',
'רק',
'בגלל',
'מכיוון',
'עד',
'אשר',
'ואילו',
'למרות',
'אס',
'כמו',
'כפי',
'אז',
'אחרי',
'כן',
'לכן',
'לפיכך',
'מאד',
'עז',
'מעט',
'מעטים',
'במידה',
'שוב',
'יותר',
'מדי',
'גם',
'כן',
'נו',
'אחר',
'אחרת',
'אחרים',
'אחרות',
'אשר',
'או',
"משטר",
"נתקדם",
"הסופית",
"התרגיל",
"תקבל",
"ושישה",
"עודף",
"לשלם",
"לקיר",
"בבגרויות",
"ושמה",
"ושלושת",
"חדשים",
"תשובה",
"ותיקים",
"זהו",
"חדשים",
"מתוך",
"הקניה",
"זמן",
"זמנית",
"במקומה",
"מהשולחן",
"רבוע",
"מטר",
"התרגילים",
"הספר",
"מרובע",
"שתעשה",
"שטחו",
"בשנת",
"בכתב",
"אלפיים",
"בעזרת",
"שאמא",
"להילי",
"הטלפון",
"דים",
"מהחצי",
"יונתן",
"הריק",
"שהתוצאה",
"שאפס",
"שכופלים",
"אפס|וכפול",
"חמישית",
"לצד",
"המכנה",
"ואפשר",
"מהחיים",
"שום",
"ממונה",
"הלמעלה",
"הלמטה",
"א",
"שממש",
"שאולי",
"שחשבת",
"שביעיות",
"חן",
"שלמים",
"עצמך",
"הספרה",
"קו",
"השבר",
"בחן",
"במאונך",
"הכסך",
"בשמונה",
"חישוב",
"תרכיבו",
"קרה",
"אוממ",
"התשובה",
"מאיות",
"שברים",
"בעשרוני",
"לשים",
"בשאלה",
"לוש",
"שהתוצא",
"ויצא",
"ת",
"בסימן",
"מישהי",
"לארבעים",
"|שבע",
"עשינו",
"במאוזן",
"זו",
"בהפכי",
"צמצום",
"הפת",
"שלחלק",
"מכל",
"כוס",
"הקפה",
"לחמישיות",
"ממישהו",
"רביעיות",
"תשובות",
"מכיוון",
"לכל",
"לנכון",
"מז",
"שההוא",
"|עינת",
"ליטל",
"מצדו",
"שעה",
"אליה",
"השיחה"
"אמרה",
"השמות",
"עכשו",
"השתיים",
"הקננייה",
"במבחנים",
"שישי",
"הגב",
"ששבע",
"שמה",
"במקום",
"בשעה",
"הסיבה",
"לאיזו",
"למקום",
"מאיזו",
"מידה",
"מקום",
"שבגללה",
"שבו",
"באיזו",
"שת",
"תשיעי",
"שתיהם",
"עשריות",
"שהשביעית",
"מחמישית",
"אזז",
"משתים",
"לשתים",
"לתשע",
"מהשני",
"אלפי",
"אלפיי",
"עושי",
"שלהוריד",
"להראות",
"חיחיחי",
"ומהיר",
"ומדבר",
"ומטלטלת",
"ומחייך",
"חייבים",
"חייבת",
"חייב",
"חוזר",
"חוזרת",
"חזרה",
"חזר",
"חופש",
"חיבור",
"חלקי",
"ומביט",
"חישובית",
"חישובים",
"ושכחתי",
"ומביטה",
"חילוק",
"חלק",
"חלקתי",
"חלקים",
"ואז",
"השמונה",
"חצאים",
"חמישיות",
"וחושבת",
"ושאלה",
"יעשה",
"חשבון",
"ואם",
"השישים"
]

'''
stop_words_dict = [
    "אחד",
    "ואחד",
    "ואחת",
    "שתיים",
    "ושתיים",
    "שלוש",
    "שלושה",
    "ושלוש",
    "ושלושה",
    "ארבע",
    "ארבעה",
    "וארבע",
    "וארבעה",
    "חמש",
    "חמישה",
    "וחמש",
    "וחמישה",
    "שש",
    "ושש",
    "שבע",
    "שבעה",
    "ושבע",
    "ושבעה",
    "וחמ",
    "שמונה",
    "ושמונה",
    "תשע",
    "תשעה",
    "ותשעה",
    "ותשע",
    "עשר",
    "עשרה",
    "עשרות",
    "ועשר",
    "ועשרה",
    "ועשרות",
    "עשרים",
    "ועשרים",
    "שלושים",
    "ושלושים",
    "ארבעים",
    "וארבעים",
    "חמישים",
    "וחמישים",
    "שישים",
    "ושישים",
    "שבעים",
    "ושבעים",
    "שמונים",
    "ושמונים",
    "תשעים",
    "ותשעים",
    "מאות",
    "ומאות",
    "וז",
    "וזה",
    "וחצי",
    "ויש",
    "והוא",
    "והיא",
    "היה",
    "ומאתיים",
    "אני",
    "אפס",
    "והמראיינת",
    "והארבעים",
    "וכאן",
    "והנה",
    "הילי",
    "ודניאל",
    'אני',
    'את',
    'אתה',
    'אנחנו',
    'אתן',
    'אתם',
    'הם',
    'הן',
    'היא',
    'הוא',
    'שלי',
    'שלו',
    'שלך',
    'שלה',
    'שלנו',
    'שלכם',
    'שלכן',
    'שלהם',
    'שלהן',
    'לי',
    'לו',
    'לה',
    'לנו',
    'לכם',
    'לכן',
    'להם',
    'להן',
    'אותה',
    'אותו',
    'זה',
    'זאת',
    'אלה',
    'אלו',
    'תחת',
    'מתחת',
    'מעל',
    'בין',
    'עם',
    'עד',
    'נגר',
    'על',
    'אל',
    'מול',
    'של',
    'אצל',
    'כמו',
    'אחר',
    'אותו',
    'בלי',
    'לפני',
    'אחרי',
    'מאחורי',
    'עלי',
    'עליו',
    'עליה',
    'עליך',
    'עלינו',
    'עליכם',
    'לעיכן',
    'עליהם',
    'עליהן',
    'כל',
    'כולם',
    'כולן',
    'כך',
    'ככה',
    'כזה',
    'זה',
    'זות',
    'אותי',
    'אותה',
    'אותם',
    'אותך',
    'אותו',
    'אותן',
    'אותנו',
    'ואת',
    'את',
    'אתכם',
    'אתכן',
    'איתי',
    'איתו',
    'איתך',
    'איתה',
    'איתם',
    'איתן',
    'איתנו',
    'איתכם',
    'איתכן',
    'יהיה',
    'תהיה',
    'היתי',
    'היתה',
    'היה',
    'להיות',
    'עצמי',
    'עצמו',
    'עצמה',
    'עצמם',
    'עצמן',
    'עצמנו',
    'עצמהם',
    'עצמהן',
    'מי',
    'מה',
    'איפה',
    'היכן',
    'במקום שבו',
    'אם',
    'לאן',
    'למקום שבו',
    'מקום בו',
    'איזה',
    'מהיכן',
    'איך',
    'כיצד',
    'באיזו מידה',
    'מתי',
    'בשעה ש',
    'כאשר',
    'כש',
    'למרות',
    'לפני',
    'אחרי',
    'מאיזו סיבה',
    'הסיבה שבגללה',
    'למה',
    'מדוע',
    'לאיזו תכלית',
    'כי',
    'יש',
    'אין',
    'אך',
    'מנין',
    'מאין',
    'מאיפה',
    'יכל',
    'יכלה',
    'יכלו',
    'יכול',
    'יכולה',
    'יכולים',
    'יכולות',
    'יוכלו',
    'יוכל',
    'מסוגל',
    'לא',
    'רק',
    'אולי',
    'אין',
    'לאו',
    'אי',
    'כלל',
    'נגד',
    'אם',
    'עם',
    'אל',
    'אלה',
    'אלו',
    'אף',
    'על',
    'מעל',
    'מתחת',
    'מצד',
    'בשביל',
    'לבין',
    'באמצע',
    'בתוך',
    'דרך',
    'מבעד',
    'באמצעות',
    'למעלה',
    'למטה',
    'מחוץ',
    'מן',
    'לעבר',
    'מכאן',
    'כאן',
    'הנה',
    'הרי',
    'פה',
    'שם',
    'אך',
    'ברם',
    'שוב',
    'אבל',
    'מבלי',
    'בלי',
    'מלבד',
    'רק',
    'בגלל',
    'מכיוון',
    'עד',
    'אשר',
    'ואילו',
    'למרות',
    'אס',
    'כמו',
    'כפי',
    'אז',
    'אחרי',
    'כן',
    'לכן',
    'לפיכך',
    'מאד',
    'עז',
    'מעט',
    'מעטים',
    'במידה',
    'שוב',
    'יותר',
    'מדי',
    'גם',
    'כן',
    'נו',
    'אחר',
    'אחרת',
    'אחרים',
    'אחרות',
    'אשר',
    'או'
]'''
vectorizer = TfidfVectorizer(stop_words=stop_words_dict)
X = vectorizer.fit_transform(train)

Sum_of_squared_distances = []
K = range(1,50)
for k in K:
    km = KMeans(init="k-means++", n_clusters=k)
    km = km.fit(X)
    Sum_of_squared_distances.append(km.inertia_)

ax = sns.lineplot(x=K, y=Sum_of_squared_distances)
ax.lines[0].set_linestyle("--")

# Add a vertical line to show the optimum number of clusters
plt.axvline(2, color='#F26457', linestyle=':')

plt.xlabel('k')
plt.ylabel('Sum of Squared Distances')
plt.title('Elbow Method For Optimal k')
plt.show()

plt.savefig('best_k.png')

k = 50
model = KMeans(init="k-means++", n_clusters=k, max_iter=50, n_init=1)
model.fit(X)
clust_labels = model.predict(X)
cent = model.cluster_centers_

order_centroids = model.cluster_centers_.argsort()[:, ::-1]
terms = vectorizer.get_feature_names_out()

results_dict = {}

for i in range(k):
    terms_list = []

    for ind in order_centroids[i, :20]:
        terms_list.append(terms[ind])

    results_dict[f'Cluster {i}'] = terms_list

df_clusters = pd.DataFrame.from_dict(results_dict)
print(df_clusters)

from sklearn.metrics import silhouette_score

def get_silhouette_score(X, k):
    for n_clusters in range(2, k):
        clusterer = KMeans(init="k-means++", n_clusters=n_clusters, random_state=42)
        y = clusterer.fit_predict(X)

        message = "For n_clusters = {} The average silhouette_score is: {}"
        print(message.format(n_clusters, silhouette_score(X, y)))

get_silhouette_score(X, 50)

for conv in datasets_per_child:
    pred = model.predict(vectorizer.transform([conv]))
    print("Text belongs to cluster number {0}".format(pred))
    for ind in order_centroids[pred, :30]:
        print(' %s' % terms[ind])
    print("***********************************************************************")



print('finished')